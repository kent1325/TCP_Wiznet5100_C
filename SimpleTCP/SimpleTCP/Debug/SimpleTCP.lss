
SimpleTCP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  000002fe  00000392  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800152  00800152  000003e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000414  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017b9  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000af6  00000000  00000000  00001d05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000087a  00000000  00000000  000027fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  00003078  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055d  00000000  00000000  000032b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007b3  00000000  00000000  0000380d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00003fc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ef       	ldi	r30, 0xFE	; 254
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 35       	cpi	r26, 0x52	; 82
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e5       	ldi	r26, 0x52	; 82
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 35       	cpi	r26, 0x58	; 88
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "spi.h"
#include "Wiznet5100.h"

int main(void)
{
    uart_init();// Initierer serial forbindelsen
  a6:	0e 94 92 00 	call	0x124	; 0x124 <uart_init>
    stdout = &uart_str;
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	91 e0       	ldi	r25, 0x01	; 1
  ae:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <__data_end+0x3>
  b2:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <__data_end+0x2>
    
	//initier Wiznet5100 modulet med grundlæggende opsætning samt spi
	printf("Initializing Wiznet and SPI...\n");
  b6:	80 e2       	ldi	r24, 0x20	; 32
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	0e 94 4d 01 	call	0x29a	; 0x29a <puts>
    spiInit();
  be:	0e 94 68 00 	call	0xd0	; 0xd0 <spiInit>
    WizInit();
  c2:	0e 94 c2 00 	call	0x184	; 0x184 <WizInit>
    printf("Initializing done!\n");
  c6:	8f e3       	ldi	r24, 0x3F	; 63
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	0e 94 4d 01 	call	0x29a	; 0x29a <puts>

    while (1) 
    {
    }
  ce:	ff cf       	rjmp	.-2      	; 0xce <main+0x28>

000000d0 <spiInit>:
#include "Wiznet5100.h"

void spiInit(void)
{
	// MOSI SS and CLK pins set to output (PORTB4, MISO is default 0 = input)
	SPI_DDR = (1<<PORTB3)|(1<<PORTB5)|(1<<PORTB2);  
  d0:	8c e2       	ldi	r24, 0x2C	; 44
  d2:	84 b9       	out	0x04, r24	; 4
	// CS pin - low = active 
	SPI_PORT |= (1<<SPI_CS);  
  d4:	2a 9a       	sbi	0x05, 2	; 5
	// Enable SPI, Master Mode 0, set clock rate to fck/2
	SPCR = (1<<SPE)|(1<<MSTR);
  d6:	80 e5       	ldi	r24, 0x50	; 80
  d8:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1<<SPI2X);  
  da:	8d b5       	in	r24, 0x2d	; 45
  dc:	81 60       	ori	r24, 0x01	; 1
  de:	8d bd       	out	0x2d, r24	; 45
  e0:	08 95       	ret

000000e2 <SPI_Write8>:

//skriver 8 bit via spi til addr
void SPI_Write8(unsigned int addr,unsigned char data)
{
  // Activate the CS pin by setting it to low
  SPI_PORT &= ~(1<<SPI_CS); 
  e2:	2a 98       	cbi	0x05, 2	; 5

  // Start Wiznet W5100 Write OpCode transmission
  SPDR = WIZNET_WRITE_OPCODE;  
  e4:	20 ef       	ldi	r18, 0xF0	; 240
  e6:	2e bd       	out	0x2e, r18	; 46

  // Wait for transmission complete
  while(!(SPSR & (1<<SPIF)));  
  e8:	0d b4       	in	r0, 0x2d	; 45
  ea:	07 fe       	sbrs	r0, 7
  ec:	fd cf       	rjmp	.-6      	; 0xe8 <SPI_Write8+0x6>

  // Start Wiznet W5100 Address High Bytes transmission
  SPDR = (addr & 0xFF00) >> 8;  
  ee:	9e bd       	out	0x2e, r25	; 46

  // Wait for transmission complete
  while(!(SPSR & (1<<SPIF)));  
  f0:	0d b4       	in	r0, 0x2d	; 45
  f2:	07 fe       	sbrs	r0, 7
  f4:	fd cf       	rjmp	.-6      	; 0xf0 <SPI_Write8+0xe>

  // Start Wiznet W5100 Address Low Bytes transmission
  SPDR = addr & 0x00FF;  
  f6:	8e bd       	out	0x2e, r24	; 46

  // Wait for transmission complete
  while(!(SPSR & (1<<SPIF)));   
  f8:	0d b4       	in	r0, 0x2d	; 45
  fa:	07 fe       	sbrs	r0, 7
  fc:	fd cf       	rjmp	.-6      	; 0xf8 <SPI_Write8+0x16>

  // Start Data transmission
  SPDR = data;  
  fe:	6e bd       	out	0x2e, r22	; 46

  // Wait for transmission complete
  while(!(SPSR & (1<<SPIF))); 
 100:	0d b4       	in	r0, 0x2d	; 45
 102:	07 fe       	sbrs	r0, 7
 104:	fd cf       	rjmp	.-6      	; 0x100 <SPI_Write8+0x1e>
   
  // CS pin is not activated by setting it to high
  SPI_PORT |= (1<<SPI_CS);
 106:	2a 9a       	sbi	0x05, 2	; 5
 108:	08 95       	ret

0000010a <uart_flush>:
#define F_CPU 16000000UL


void uart_flush(void)
{
  unsigned char dummy;  while (UCSR0A & (1<<RXC0)) dummy = UDR0;
 10a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 10e:	88 23       	and	r24, r24
 110:	44 f4       	brge	.+16     	; 0x122 <uart_flush+0x18>
 112:	a6 ec       	ldi	r26, 0xC6	; 198
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	e0 ec       	ldi	r30, 0xC0	; 192
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	8c 91       	ld	r24, X
 11c:	80 81       	ld	r24, Z
 11e:	88 23       	and	r24, r24
 120:	e4 f3       	brlt	.-8      	; 0x11a <uart_flush+0x10>
 122:	08 95       	ret

00000124 <uart_init>:
}


void uart_init(void)
{
  UBRR0H = (((F_CPU/BAUD_RATE)/16)-1)>>8;	// set baud rate
 124:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  UBRR0L = (((F_CPU/BAUD_RATE)/16)-1);
 128:	8f ec       	ldi	r24, 0xCF	; 207
 12a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  UCSR0B = (1<<RXEN0)|(1<<TXEN0); 		// enable Rx & Tx
 12e:	88 e1       	ldi	r24, 0x18	; 24
 130:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  UCSR0C=  (1<<UCSZ01)|(1<<UCSZ00);  	       // config USART; 8N1
 134:	86 e0       	ldi	r24, 0x06	; 6
 136:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  
  uart_flush();
 13a:	0e 94 85 00 	call	0x10a	; 0x10a <uart_flush>
 13e:	08 95       	ret

00000140 <uart_putch>:
} 

int uart_putch(char ch,FILE *stream)
{
 140:	cf 93       	push	r28
 142:	c8 2f       	mov	r28, r24
    if (ch == '\n')
 144:	8a 30       	cpi	r24, 0x0A	; 10
 146:	19 f4       	brne	.+6      	; 0x14e <uart_putch+0xe>
    	uart_putch('\r', stream); 
 148:	8d e0       	ldi	r24, 0x0D	; 13
 14a:	0e 94 a0 00 	call	0x140	; 0x140 <uart_putch>

	while (!(UCSR0A & (1<<UDRE0)));
 14e:	e0 ec       	ldi	r30, 0xC0	; 192
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	90 81       	ld	r25, Z
 154:	95 ff       	sbrs	r25, 5
 156:	fd cf       	rjmp	.-6      	; 0x152 <uart_putch+0x12>
    UDR0=ch;   
 158:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

	return 0;
}
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <uart_getch>:

int uart_getch(FILE *stream)
{
 164:	cf 93       	push	r28
 166:	bc 01       	movw	r22, r24
   unsigned char ch;   
   while (!(UCSR0A & (1<<RXC0)));
 168:	e0 ec       	ldi	r30, 0xC0	; 192
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	90 81       	ld	r25, Z
 16e:	99 23       	and	r25, r25
 170:	ec f7       	brge	.-6      	; 0x16c <uart_getch+0x8>
   ch=UDR0;  
 172:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
   uart_putch(ch,stream);       
 176:	8c 2f       	mov	r24, r28
 178:	0e 94 a0 00 	call	0x140	; 0x140 <uart_putch>

   return ch;
}
 17c:	8c 2f       	mov	r24, r28
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <WizInit>:
	
	return 1;
}

void WizInit(void)
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
	// Basic ethernet Setup
  
	// MR = 0b10000000; Soft Reset...
	SPI_Write8(MR,0x80); 
 188:	60 e8       	ldi	r22, 0x80	; 128
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 71 00 	call	0xe2	; 0xe2 <SPI_Write8>

	// Gateway addr
	SPI_Write8(GAR + 0,gtw_addr[0]);
 194:	ce e0       	ldi	r28, 0x0E	; 14
 196:	d1 e0       	ldi	r29, 0x01	; 1
 198:	68 81       	ld	r22, Y
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 71 00 	call	0xe2	; 0xe2 <SPI_Write8>
	SPI_Write8(GAR + 1,gtw_addr[1]);
 1a4:	69 81       	ldd	r22, Y+1	; 0x01
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 71 00 	call	0xe2	; 0xe2 <SPI_Write8>
	SPI_Write8(GAR + 2,gtw_addr[2]);
 1b0:	6a 81       	ldd	r22, Y+2	; 0x02
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	83 e0       	ldi	r24, 0x03	; 3
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 71 00 	call	0xe2	; 0xe2 <SPI_Write8>
	SPI_Write8(GAR + 3,gtw_addr[3]);
 1bc:	6b 81       	ldd	r22, Y+3	; 0x03
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	84 e0       	ldi	r24, 0x04	; 4
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 71 00 	call	0xe2	; 0xe2 <SPI_Write8>

	// MAC addr
	SPI_Write8(SAR + 0,mac_addr[0]);
 1c8:	ca e1       	ldi	r28, 0x1A	; 26
 1ca:	d1 e0       	ldi	r29, 0x01	; 1
 1cc:	68 81       	ld	r22, Y
 1ce:	70 e0       	ldi	r23, 0x00	; 0
 1d0:	89 e0       	ldi	r24, 0x09	; 9
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 71 00 	call	0xe2	; 0xe2 <SPI_Write8>
	SPI_Write8(SAR + 1,mac_addr[1]);
 1d8:	69 81       	ldd	r22, Y+1	; 0x01
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	8a e0       	ldi	r24, 0x0A	; 10
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 71 00 	call	0xe2	; 0xe2 <SPI_Write8>
	SPI_Write8(SAR + 2,mac_addr[2]);
 1e4:	6a 81       	ldd	r22, Y+2	; 0x02
 1e6:	70 e0       	ldi	r23, 0x00	; 0
 1e8:	8b e0       	ldi	r24, 0x0B	; 11
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 71 00 	call	0xe2	; 0xe2 <SPI_Write8>
	SPI_Write8(SAR + 3,mac_addr[3]);
 1f0:	6b 81       	ldd	r22, Y+3	; 0x03
 1f2:	70 e0       	ldi	r23, 0x00	; 0
 1f4:	8c e0       	ldi	r24, 0x0C	; 12
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 71 00 	call	0xe2	; 0xe2 <SPI_Write8>
	SPI_Write8(SAR + 4,mac_addr[4]);
 1fc:	6c 81       	ldd	r22, Y+4	; 0x04
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	8d e0       	ldi	r24, 0x0D	; 13
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 71 00 	call	0xe2	; 0xe2 <SPI_Write8>
	SPI_Write8(SAR + 5,mac_addr[5]);
 208:	6d 81       	ldd	r22, Y+5	; 0x05
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	8e e0       	ldi	r24, 0x0E	; 14
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 71 00 	call	0xe2	; 0xe2 <SPI_Write8>

	// Subnet mask
	SPI_Write8(SUBR + 0,sub_mask[0]);
 214:	c2 e1       	ldi	r28, 0x12	; 18
 216:	d1 e0       	ldi	r29, 0x01	; 1
 218:	68 81       	ld	r22, Y
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	85 e0       	ldi	r24, 0x05	; 5
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 71 00 	call	0xe2	; 0xe2 <SPI_Write8>
	SPI_Write8(SUBR + 1,sub_mask[1]);
 224:	69 81       	ldd	r22, Y+1	; 0x01
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	86 e0       	ldi	r24, 0x06	; 6
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 71 00 	call	0xe2	; 0xe2 <SPI_Write8>
	SPI_Write8(SUBR + 2,sub_mask[2]);
 230:	6a 81       	ldd	r22, Y+2	; 0x02
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	87 e0       	ldi	r24, 0x07	; 7
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 71 00 	call	0xe2	; 0xe2 <SPI_Write8>
	SPI_Write8(SUBR + 3,sub_mask[3]);
 23c:	6b 81       	ldd	r22, Y+3	; 0x03
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	88 e0       	ldi	r24, 0x08	; 8
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 71 00 	call	0xe2	; 0xe2 <SPI_Write8>

	//IP Addr
	SPI_Write8(SIPR + 0,ip_addr[0]);
 248:	c6 e1       	ldi	r28, 0x16	; 22
 24a:	d1 e0       	ldi	r29, 0x01	; 1
 24c:	68 81       	ld	r22, Y
 24e:	70 e0       	ldi	r23, 0x00	; 0
 250:	8f e0       	ldi	r24, 0x0F	; 15
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 71 00 	call	0xe2	; 0xe2 <SPI_Write8>
	SPI_Write8(SIPR + 1,ip_addr[1]);
 258:	69 81       	ldd	r22, Y+1	; 0x01
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	80 e1       	ldi	r24, 0x10	; 16
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 71 00 	call	0xe2	; 0xe2 <SPI_Write8>
	SPI_Write8(SIPR + 2,ip_addr[2]);
 264:	6a 81       	ldd	r22, Y+2	; 0x02
 266:	70 e0       	ldi	r23, 0x00	; 0
 268:	81 e1       	ldi	r24, 0x11	; 17
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 71 00 	call	0xe2	; 0xe2 <SPI_Write8>
	SPI_Write8(SIPR + 3,ip_addr[3]);
 270:	6b 81       	ldd	r22, Y+3	; 0x03
 272:	70 e0       	ldi	r23, 0x00	; 0
 274:	82 e1       	ldi	r24, 0x12	; 18
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 71 00 	call	0xe2	; 0xe2 <SPI_Write8>
 
	// Recieve and transmission
	SPI_Write8(RMSR,0x55);		// Tildeler 0b01010101 hvilket er 2Kb til hver socket's RX buffer. (Maximum 8 KB i alt for alle 4!)
 27c:	65 e5       	ldi	r22, 0x55	; 85
 27e:	70 e0       	ldi	r23, 0x00	; 0
 280:	8a e1       	ldi	r24, 0x1A	; 26
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 71 00 	call	0xe2	; 0xe2 <SPI_Write8>
	SPI_Write8(TMSR,0x55);		// Samme for TX
 288:	65 e5       	ldi	r22, 0x55	; 85
 28a:	70 e0       	ldi	r23, 0x00	; 0
 28c:	8b e1       	ldi	r24, 0x1B	; 27
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 71 00 	call	0xe2	; 0xe2 <SPI_Write8>
  
	// Basic Init er overstået, nu kan vi pinge...
}
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	08 95       	ret

0000029a <puts>:
 29a:	0f 93       	push	r16
 29c:	1f 93       	push	r17
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <__data_end+0x2>
 2a6:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <__data_end+0x3>
 2aa:	23 81       	ldd	r18, Z+3	; 0x03
 2ac:	21 ff       	sbrs	r18, 1
 2ae:	1b c0       	rjmp	.+54     	; 0x2e6 <puts+0x4c>
 2b0:	8c 01       	movw	r16, r24
 2b2:	d0 e0       	ldi	r29, 0x00	; 0
 2b4:	c0 e0       	ldi	r28, 0x00	; 0
 2b6:	f8 01       	movw	r30, r16
 2b8:	81 91       	ld	r24, Z+
 2ba:	8f 01       	movw	r16, r30
 2bc:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <__data_end+0x2>
 2c0:	70 91 55 01 	lds	r23, 0x0155	; 0x800155 <__data_end+0x3>
 2c4:	db 01       	movw	r26, r22
 2c6:	18 96       	adiw	r26, 0x08	; 8
 2c8:	ed 91       	ld	r30, X+
 2ca:	fc 91       	ld	r31, X
 2cc:	19 97       	sbiw	r26, 0x09	; 9
 2ce:	88 23       	and	r24, r24
 2d0:	31 f0       	breq	.+12     	; 0x2de <puts+0x44>
 2d2:	09 95       	icall
 2d4:	89 2b       	or	r24, r25
 2d6:	79 f3       	breq	.-34     	; 0x2b6 <puts+0x1c>
 2d8:	df ef       	ldi	r29, 0xFF	; 255
 2da:	cf ef       	ldi	r28, 0xFF	; 255
 2dc:	ec cf       	rjmp	.-40     	; 0x2b6 <puts+0x1c>
 2de:	8a e0       	ldi	r24, 0x0A	; 10
 2e0:	09 95       	icall
 2e2:	89 2b       	or	r24, r25
 2e4:	19 f0       	breq	.+6      	; 0x2ec <puts+0x52>
 2e6:	8f ef       	ldi	r24, 0xFF	; 255
 2e8:	9f ef       	ldi	r25, 0xFF	; 255
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <puts+0x56>
 2ec:	8d 2f       	mov	r24, r29
 2ee:	9c 2f       	mov	r25, r28
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	1f 91       	pop	r17
 2f6:	0f 91       	pop	r16
 2f8:	08 95       	ret

000002fa <_exit>:
 2fa:	f8 94       	cli

000002fc <__stop_program>:
 2fc:	ff cf       	rjmp	.-2      	; 0x2fc <__stop_program>
